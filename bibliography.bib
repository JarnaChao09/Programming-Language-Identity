% Python citation
@book{van1995python,
  title={Python reference manual},
  author={Van Rossum, Guido and Drake Jr, Fred L},
  year={1995},
  publisher={Centrum voor Wiskunde en Informatica Amsterdam}
}

% Ruby Citation
@book{10.5555/1408408,
    author = {Flanagan, David and Matsumoto, Yukihiro},
    title = {The Ruby Programming Language},
    year = {2008},
    isbn = {9780596516178},
    publisher = {O'Reilly},
    edition = {First},
    abstract = {The Ruby Programming Language is the authoritative guide to Ruby and provides comprehensive coverage of versions 1.8 and 1.9 of the language. It was written (and illustrated!) by an all-star team: David Flanagan, bestselling author of programming language "bibles" (including JavaScript: The Definitive Guide and Java in a Nutshell) and committer to the Ruby Subversion repository. Yukihiro "Matz" Matsumoto, creator, designer and lead developer of Ruby and author of Ruby in a Nutshell, which has been expanded and revised to become this book. why the lucky stiff, artist and Ruby programmer extraordinaire. This book begins with a quick-start tutorial to the language, and then explains the language in detail from the bottom up: from lexical and syntactic structure to datatypes to expressions and statements and on through methods, blocks, lambdas, closures, classes and modules. The book also includes a long and thorough introduction to the rich API of the Ruby platform, demonstrating -- with heavily-commented example code -- Ruby's facilities for text processing, numeric manipulation, collections, input/output, networking, and concurrency. An entire chapter is devoted to Ruby's metaprogramming capabilities. The Ruby Programming Language documents the Ruby language definitively but without the formality of a language specification. It is written for experienced programmers who are new to Ruby, and for current Ruby programmers who want to challenge their understanding and increase their mastery of the language.}
}

% Lua Citation
@book{ierusalimschy2006programming,
  title={Programming in lua},
  author={Ierusalimschy, Roberto},
  year={2006},
  publisher={Roberto Ierusalimschy}
}

% Get C/C++ citation

% Rust citation
@book{10.5555/3271463,
    author = {Klabnik, Steve and Nichols, Carol},
    title = {The Rust Programming Language},
    year = {2018},
    isbn = {1593278284},
    publisher = {No Starch Press},
    address = {USA},
    abstract = {The Rust Programming Language is the official book on Rust, an open-source, community-developed systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. This is the undisputed go-to guide to Rust, written by two members of the Rust core team, with feedback and contributions from 42 members of the community. The book assumes that youve written code in another programming language but makes no assumptions about which one, meaning the material is accessible and useful to developers from a wide variety of programming backgrounds. Known by the Rust community as The Book, The Rust Programming Language includes concept chapters, where youll learn about a particular aspect of Rust, and project chapters, where youll apply what youve learned so far to build small programs. The Book opens with a quick hands-on project to introduce the basics then explores key concepts in depth, such as ownership, the type system, error handling, and fearless concurrency. Next come detailed explanations of Rust-oriented perspectives on topics like pattern matching, iterators, and smart pointers, with concrete examples and exercises--taking you from theory to practice. The Rust Programming Language will also show you how to:- Grasp important concepts unique to Rust, like ownership, borrowing, and lifetimes- Use Cargo, Rusts built-in package manager, to build and maintain your code, including downloading and building dependencies- Effectively use Rusts zero-cost abstractions and employ your own Youll learn to develop reliable code thats speed and memory efficient, while avoiding the infamous and arcane programming pitfalls common at the systems level. When you need to dive down into lower-level control, this guide will show you how without taking on the customary risk of crashes or security holes and without requiring you to learn the fine points of a fickle toolchain. Youll also learn how to create command line programs, build single- and multithreaded web servers, and much more. The Rust Programming Language fully embraces Rusts potential to empower its users. This friendly and approachable guide will help you build not only your knowledge of Rust but also your ability to program with confidence in a wider variety of domains.}
}

% get Go citation

% get Java, C#, Elixir/Erlang citation

% CraftingInterpreters Citation
 @book{nystrom_2021, 
    place={United States?}, 
    title={Crafting interpreters}, 
    publisher={Genever Benning}, 
    author={Nystrom, Robert}, 
    year={2021}
}

% Kotlin Citation
 @book{jemerov_isakova_2017, 
    place={Shelter Island, NY}, 
    title={Kotlin in action}, 
    publisher={Manning Publications Co.}, 
    author={Jemerov, Dmitry and Isakova, Svetlana}, 
    year={2017}
}

% Julia citation
@article{bezanson2017julia,
  title={Julia: A fresh approach to numerical computing},
  author={Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B},
  journal={SIAM review},
  volume={59},
  number={1},
  pages={65--98},
  year={2017},
  publisher={SIAM},
  url={https://doi.org/10.1137/141000671}
}

% LLVM Citation
@InProceedings{LLVM:CGO04,
     Author  = {Chris Lattner and Vikram Adve},
     Title = {{LLVM}: A Compilation Framework for Lifelong Program Analysis and Transformation},
     Booktitle = CGO,
     Address = {San Jose, CA, USA},
     Month = {Mar},
     Year  = {2004},
     pages = {75--88},
}

% To Type or Not to Type Citiation
@InProceedings{7985711,  
    author={Gao, Zheng and Bird, Christian and Barr, Earl T.},
    booktitle={2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)},
    title={To Type or Not to Type: Quantifying Detectable Bugs in JavaScript},
    year={2017},
    volume={},
    number={},
    pages={758-769},
    abstract={JavaScript is growing explosively and is now used in large mature projects even outside the web domain. JavaScript is also a dynamically typed language for which static type systems, notably Facebook's Flow and Microsoft's TypeScript, have been written. What benefits do these static type systems provide? Leveraging JavaScript project histories, we select a fixed bug and check out the code just prior to the fix. We manually add type annotations to the buggy code and test whether Flow and TypeScript report an error on the buggy code, thereby possibly prompting a developer to fix the bug before its public release. We then report the proportion of bugs on which these type systems reported an error. Evaluating static type systems against public bugs, which have survived testing and review, is conservative: it understates their effectiveness at detecting bugs during private development, not to mention their other benefits such as facilitating code search/completion and serving as documentation. Despite this uneven playing field, our central finding is that both static type systems find an important percentage of public bugs: both Flow 0.30 and TypeScript 2.0 successfully detect 15\%!.},
    keywords={},
    doi={10.1109/ICSE.2017.75},
    ISSN={1558-1225},
    month={May},
}

% PEP 484 -- Type Hinting Citation
 @misc{python.org, 
    title={PEP 484 -- type hints},
    author={Guido van Rossum <guido at python.org>, Jukka Lehtosalo <jukka.lehtosalo at iki.fi>, Łukasz Langa <lukasz at python.org>},
    url={https://www.python.org/dev/peps/pep-0484/},
    journal={Python.org},
    year={2014},
}

% Ruby RBS Citation
 @misc{kuwabara_2021, 
    title={RBS collection was released!},
    url={https://dev.to/pocke/rbs-collection-was-released-4nmm},
    journal={DEV Community},
    publisher={DEV Community},
    author={Kuwabara, Masataka Pocke},
    year={2021},
    month={Sep},
 }
 
 % C++ auto Citation
  @misc{cppreference.com, 
    title={Placeholder type specifiers (since C++11)},
    url={https://en.cppreference.com/w/cpp/language/auto},
    journal={cppreference.com}
}

% Java Type Inference Citation
 @misc{java_type_inference, 
    title={Type inference},
    url={https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html},
    journal={Type Inference (The Java™ Tutorials &gt; Learning the Java Language &gt; Generics (Updated))}
} 

% Kotlin Language Spec Citation
 @misc{akhin_belyaev,
    title={Kotlin Language Specification},
    url={https://kotlinlang.org/spec/introduction.html},
    journal={Kotlin Language specification},
    author={Akhin, Marat and Belyaev, Mikhail}
} 

% Swift Type Inference Citation
 @misc{swift,
    title={Swift.org - Type Safety and Type Inference}, 
    url={https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322}, 
    journal={The Basics - The Swift Programming Language (Swift 5.6)}, 
    author={Inc., Apple}
} 

% Scala Type Inference Citation
 @misc{scala,
    title={Scala - Type inference},
    url={https://docs.scala-lang.org/tour/type-inference.html},
    journal={Scala Documentation}
} 